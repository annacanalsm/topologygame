import .topologia
import .bases
import .productes
import .metrics
import data.real.ereal
-- import data.complex.exponential -- sin and cos

open set
open topological_space

noncomputable theory

/- We can now work with topological spaces like this. -/
example (X : Type) [topological_space X] (U V W : set X) (hU : is_open U) (hV : is_open V)
  (hW : is_open W) : is_open (U ‚à© V ‚à© W) :=
begin
  apply inter _ _ _ hW,
  exact inter _ _ hU hV,
end

/- Defining a basic topology now works like so: -/
def discrete (X : Type) : topological_space X :=
{ is_open := Œª U, true, -- everything is open
  univ_mem := trivial,
  union := Œª _ _, by trivial,
  inter := Œª _ _ _ _, by trivial }

/-- The indiscrete topology is the coarsest possible one. -/
def indiscrete (X : Type) : topological_space X := generate_from ‚àÖ

/- The union of a family of sets containing univ is univ -/
lemma sUnion_univ_of_mem_univ {X : Type} {I : set (set X)} (h : univ ‚àà I) : ‚ãÉ‚ÇÄ I = univ :=
begin
  rw sUnion_eq_univ_iff,
  intros x,
  use univ,
  exact ‚ü®h, mem_univ x‚ü©,
end

/-- The only opens in the indiscrete topology are ‚àÖ and univ -/
lemma indiscrete_is_open_iff {X : Type} (U : set X) :
@is_open _ (indiscrete X) U ‚Üî U = ‚àÖ ‚à® U = univ :=
begin
  split,
  {
    intro h,
    induction h with _ _ I hI hI' W1 W2 hW1 hW2 hW1' hW2',
    { tauto },
    { tauto },
    {
      by_cases H : univ ‚àà I,
      { exact or.inr (sUnion_univ_of_mem_univ H) },
      {
        left,
        rw sUnion_eq_empty,
        finish,
      }
    },
    {
      cases hW1',
      {
        left,
        rw [inter_comm, hW1'],
        apply inter_empty,
      },
      subst hW1',
      simpa,
    },
  },
  {
    intro h,
    cases h,
    all_goals {rw h, simp },
  }
end

/-- A map from a discrete topology is always continuous. -/
lemma is_continuous_from_discrete {X Y: Type} [topological_space Y]
(f: X ‚Üí Y) : @is_continuous _ _ (discrete X) _ f :=
begin
  intros V hV,
  tauto,
end

/-- A map to an indiscrete topology is always continuous. -/
lemma is_continuous_to_indiscrete {X Y: Type} [topological_space X]
(f: X ‚Üí Y) : @is_continuous _ _ _ (indiscrete Y) f :=
begin
  intros V hV,
  rw indiscrete_is_open_iff at hV,
  cases hV; rw hV,
  {
    apply empty_mem,
  },
  {
    apply univ_mem,
  }
end

/-
Show that {‚àÖ, univ, (-‚àû, a) : a : ‚Ñù} is a topology on ‚Ñù
-/
open real
open ereal

def left_ray : ereal ‚Üí (set ‚Ñù) := Œª a , (ite (a = ‚ä•) ‚àÖ (ite (a = ‚ä§) univ {x : ‚Ñù | (x : ereal) < a}))

@[simp]
lemma left_ray_top_def : left_ray ‚ä§ = univ :=
begin
  unfold left_ray,
  simp,
  tauto,
end

@[simp]
lemma left_ray_bot_def : left_ray ‚ä• = ‚àÖ :=
begin
  unfold left_ray,
  simp,
end

@[simp]
lemma left_ray_eq_Iio (x : ‚Ñù) : left_ray (x : ereal) = Iio x :=
begin
  unfold left_ray,
  have xnetop : (x : ereal) ‚â† ‚ä§, by trivial,
  have xnebot : (x : ereal) ‚â† ‚ä• := dec_trivial,
  simp [xnetop, xnebot, Iio_def],
end

@[simp]
lemma left_ray_mem (x : ‚Ñù) (y : ereal) : x ‚àà left_ray y ‚Üî (x : ereal) < y :=
begin
  by_cases ht : y = ‚ä§,
  {
    simp [ht],
    exact dec_trivial,
  },
  by_cases hb : y = ‚ä•,
  { simp [hb] },
  obtain ‚ü®z, hz‚ü© := lift_to_real hb ht,
  subst hz,
  simp,
end

lemma left_ray_def (x : ereal) : left_ray x = {y : ‚Ñù | (y : ereal) < x } :=
begin
  ext,
  simp,
end

@[simp]
lemma left_ray_univ_iff (b : ereal) : left_ray b = univ ‚Üî b = ‚ä§ :=
begin
  split,
  {
    intro h,
    unfold left_ray at h,
    by_contradiction hc,
    simp [hc] at h,
    by_cases ht : b = ‚ä•,
    {
      subst ht,
      simp at h,
      exact empty_ne_univ h,
    },
    obtain ‚ü®z, hz‚ü© := lift_to_real ht hc,
    simp [ht] at h,
    subst hz,
    simp at h,
    specialize h (z+1),
    linarith [h],
  },
  exact Œª h, by simp [h],
end

@[simp]
lemma left_ray_empty_iff (b : ereal) : left_ray b = ‚àÖ ‚Üî b = ‚ä• :=
begin
  split,
  {
    intro h,
    unfold left_ray at h,
    by_contradiction hc,
    simp [hc] at h,
    by_cases ht : b = ‚ä§,
    { simpa [ht] using h },
    { simp [ht] at h,
      obtain ‚ü®z, hz‚ü© := lift_to_real hc ht,
      subst hz,
      simp at h,
      specialize h (z-1),
      linarith [h] },
  },
  exact Œª h, by simp [h],
end

@[simp]
lemma left_ray_subset_iff (a b : ereal) : left_ray a ‚äÜ left_ray b ‚Üî a ‚â§ b :=
begin
  by_cases ha1 : a = ‚ä•,
  { simp [ha1] },
  by_cases ha2 : a = ‚ä§,
  { simp [ha2, univ_subset_iff] },
  by_cases hb1 : b = ‚ä•,
  { simp [hb1, subset_empty_iff] },
  by_cases hb2 : b = ‚ä§,
  { simp [hb2] },
  { simp [left_ray_def],
    obtain ‚ü®r, hr‚ü© := lift_to_real ha1 ha2,
    obtain ‚ü®s, hs‚ü© := lift_to_real hb1 hb2,
    subst hr, subst hs,
    simp,
    exact forall_lt_iff_le },
end

@[simp]
lemma left_ray_inter (a b : ereal) :
  left_ray a ‚à© left_ray b = left_ray (min a b) :=
begin
  by_cases a ‚â§ b,
  {
    rw min_eq_left h,
    apply inter_eq_self_of_subset_left,
    simp [h],
  },
  {
    push_neg at h,
    replace h := le_of_lt h,
    rw min_eq_right h,
    apply inter_eq_self_of_subset_right,
    simp [h],
  }
end

lemma union_of_intervals {Œ± : set ‚Ñù} (hne : ‚àÉ a : ‚Ñù, a ‚àà Œ±) (h : ‚àÉ (C : ‚Ñù), ‚àÄ a ‚àà Œ±, a ‚â§ C) :
  (‚ãÉ a ‚àà Œ±, Iio a) = Iio (Sup Œ±) :=
begin
  simp only [‚ÜêIio_def],
  ext,
  simp [lt_Sup Œ± hne h],
end

lemma bUnion_left_ray {Œ± : set ereal} :
  (‚ãÉ a ‚àà Œ±, left_ray a) = left_ray (Sup Œ±) :=
begin
  apply eq_of_subset_of_subset,
  {
    apply bUnion_subset,
    exact Œª _ hx, by simp [ereal.le_Sup hx],
  },
  {
    intros x hx,
    rw mem_bUnion_iff,
    have hx' : (x : ereal) < Sup Œ±, by simpa using hx,
    obtain ‚ü®y, ‚ü®hy1, hy2‚ü©‚ü© := ereal.lt_Sup hx',
    exact ‚ü®y, by simp [hy1, hy2]‚ü©,
  }
end

def left_ray_topology : topological_space ‚Ñù := {
  is_open := left_ray '' univ,
  univ_mem := ‚ü®‚ä§, by tauto‚ü©,
  union :=
  begin
    intros Y hY,
    use Sup (left_ray‚Åª¬π' Y),
    simp [‚ÜêbUnion_left_ray, sUnion_eq_bUnion],
    ext1,
    simp,
    split,
    { rintro ‚ü®a, ha‚ü©,
      exact ‚ü®left_ray a, by simp [ha]‚ü© },
    {
      rintro ‚ü®B, hB‚ü©,
      obtain ‚ü®i, ‚ü®hi1, hi2‚ü©‚ü© := hY B hB.1,
      use i,
      rw [‚Üêleft_ray_mem, hi2],
      exact hB,
    }
  end,
  inter :=
  begin
    rintros A B ‚ü®a, _, haA‚ü© ‚ü®b, _, hbB‚ü©,
    subst haA, subst hbB,
    exact ‚ü®min a b, by simp‚ü©,
  end
}

/-
Define the family of intervals of the form [a, b)
-/
def Icos := {B : set ‚Ñù | ‚àÉ a b : ‚Ñù, B = Ico a b }

lemma mem_Icos {a b : ‚Ñù} : Ico a b ‚àà Icos :=  ‚ü®a, ‚ü®b, rfl‚ü©‚ü©

example : basis_condition Icos :=
begin
  split,
  {
    intros x,
    use Ico x (x+1),
    split; simp [mem_Icos, zero_lt_one],
  },
  {
    intros U V hU hV x,
    rcases hU with ‚ü®Ua, ‚ü®Ub , Uab_h‚ü©‚ü©,
    rcases hV with ‚ü®Va, ‚ü®Vb , Vab_h‚ü©‚ü©,
    subst Uab_h, subst Vab_h,
    intro hx,
    use Ico (max Ua Va) (min Ub Vb),
    split,
    { simp [mem_Icos], },
    split,
    {
      simp [mem_Ico] at hx,
      simp [hx],
    },
    {
      unfold Ico,
      norm_num,
      split;
      { intros,
        simp * },
    },
  },
end

--finset, set.finite, fintype

def three_point_topology_0 : topological_space (fin 3) := generate_from ‚àÖ

def three_point_topology_1 : topological_space (fin 3) := generate_from {{0}, {0,1}, {0,2}}

def three_point_topology_2 : topological_space (fin 3) := generate_from {{1}, {2}, {3}}

def three_point_topology_3 (n : ‚Ñï) [has_one (fin n)] : topological_space (fin n) := 
  generate_from {{1}, {2,3}}



-- definir una topologia per un conjunt de tres elements
-- topologia cofinita
-- topologia del punt particular x: Œª (A : set X), A = ‚àÖ ‚à® x ‚àà A
-- topologia digital (a ‚Ñ§) {2n+1} tots oberts, {2n-1,2n,2n+1} obert
-- definir espai projectiu
-- definir la banda de M√∂bius

def is_open_punt_particular (X : Type) (x : X) :=  Œª (A : set X), A = ‚àÖ ‚à® x ‚àà A

lemma is_open_punt_particular.union {X : Type} :
  ‚àÄ (ùí¥ : set (set X)),
    (‚àÄ (A : set X), A ‚àà ùí¥ ‚Üí A·∂ú.finite) ‚Üí (‚ãÉ‚ÇÄ ùí¥)·∂ú.finite :=
begin
  sorry
end

namespace Moebius
open topological_space
def Ioos := {B : set ‚Ñù | ‚àÉ a b : ‚Ñù, B = Ico a b }

instance ordinary_topology: topological_space ‚Ñù := generate_from Ioos

instance open_interval(a b: ‚Ñù): topological_space (Ioo a b) := top_induced (Ioo a b) ‚Ñù (Œª x, ‚Üëx)

-- Es pot fer m√©s curt?
example : (Ioo (- 1: ‚Ñù) 1) ‚âÖ ‚Ñù :=
{ to_fun := (Œª x, ‚Üëx / (1- abs(‚Üëx))),
  inv_fun := 
  begin
    intro x,
    use x/(1+abs x),
    have h1: 0 ‚â§ abs x := abs_nonneg x,
    have h2: 0 < 1 + abs x := by linarith,  
    have h3: 0 ‚â§ abs x + x,
    {
      by_cases 0 ‚â§ x,
      { linarith },
      {
        norm_num at h,
        rw abs_of_neg h,
        linarith,
      },
    },
    have h4: x ‚â§ abs x,
    {
      by_cases 0 ‚â§ x,
      { rw abs_of_nonneg h },
      { linarith },
    },
    split,
    {
      have h: (-1)*(1+ abs(x)) < x,
      {
        norm_num,
        linarith,
      },
      exact (lt_div_iff h2).mpr h,
    },
    {
      apply (div_lt_iff h2).mpr,
      norm_num,
      linarith,
    },
  end,
  left_inv := 
  begin
    rintro ‚ü®x, hx‚ü©,
    by_cases x < 0,
    {
      ext,
      norm_num,
      rw abs_of_neg h,
      have hhh : x / (1 + x) < 0,
      {
        cases hx,
        have hhx : 0 < 1 + x,
        { linarith },
        apply (div_lt_iff hhx).mpr,
        convert h,
        simp,
      },
      norm_num,
      rw abs_of_neg hhh,
      have : 1 + x ‚â† 0,
      {
        cases hx,
        linarith,
      },
      field_simp
    },
    {
      ext,
      norm_num at *,
      rw abs_of_nonneg h,
      have hhh : x / (1 - x) ‚â• 0,
      {
        cases hx,
        have hhx : 0 < 1 - x,
        { linarith },
        apply (le_div_iff hhx).mpr,
        linarith,
      },
      rw abs_of_nonneg hhh,
      have : 1 - x ‚â† 0,
      {
        cases hx,
        linarith,
      },
      field_simp,
    }
  end,
  right_inv := sorry,
  continuous_to_fun := sorry,
  continuous_inv_fun := sorry }

/-- Square [0,1] √ó [0,1] used to construct quotients. -/
def unit_square := (((Icc (0: ‚Ñù) 1): Type) √ó (Icc (0: ‚Ñù) 1))
instance :has_lift_t unit_square (‚Ñù √ó ‚Ñù) :=
begin
  fconstructor,
  rintros ‚ü®x, y‚ü©,
  exact ‚ü®x, y‚ü©,  
end
instance open_square: topological_space unit_square  := 
  top_induced unit_square (‚Ñù √ó ‚Ñù) (Œª x, ‚Üëx)

/-- The M√∂bius strip, defined as a qutient in [0,1) √ó [0,1) -/
instance Moebius_quot: topological_space (((Icc (0: ‚Ñù) 1): Type) √ó (Ico (0: ‚Ñù) 1)) :=
begin
  apply top_quotient unit_square (( (Icc (0:‚Ñù) 1) :  Type) √ó (Ico (0:‚Ñù) 1)) _,
  intro xy,
  cases xy with x y,
  by_cases h: y.1 = (1: ‚Ñù),{
    split,
    { use 1-x,
      cases x,
      norm_num,
      finish },
    { use 0,
      norm_num },
  },
  {
    split,
    { use x },
    cases y with y hy,
    use y,
    cases hy,
    norm_num at h;
    split,
    {
      linarith,
    },
    exact (ne.le_iff_lt h).mp hy_right,
  },
end  

/-- The torus, defined as a quotient in [0,1) √ó [0,1) -/
def torus: topological_space (((Ico (0: ‚Ñù) 1): Type) √ó (Ico (0: ‚Ñù) 1)) :=
begin
  apply top_quotient (‚Ñù √ó ‚Ñù)  (( (Ico (0:‚Ñù) 1) :  Type) √ó (Ico (0:‚Ñù) 1)) _,
  intro xy,
  cases xy with x y,
  split,
  use fract x,
  exact ‚ü®fract_nonneg _,fract_lt_one _‚ü©,
  use fract y,
  exact ‚ü®fract_nonneg _,fract_lt_one _‚ü©,
end

notation `‚Ñù¬≥` := ‚Ñù √ó ‚Ñù √ó ‚Ñù
open real

/- No se com importar sin i cos...

def œÜ(u v: ‚Ñù) : ‚Ñù¬≥ := ‚ü®(1+v*cos (u/2))*cos v, ‚ü®(1+v*cos (u/2))*sin u, v*sin(u/2)‚ü©‚ü©

def Moebius :=  {x: ‚Ñù¬≥ // ‚àÉ u v : ‚Ñù, x = œÜ u v} 
-- Es pot fer d'aluna manera semblant a aix√≤?
-- def Moebius' := œÜ '' univ
-- #check Moebius'

instance Moebius.lift : has_lift_t Moebius ‚Ñù¬≥:=
begin
  fconstructor,
  rintros ‚ü®x, hx‚ü©,
  exact x,
end

/-- M√∂bius stip as a subspace of ‚Ñù¬≥ -/
instance Moebius_sub: topological_space Moebius :=
   top_induced Moebius ‚Ñù¬≥ (Œª x, ‚Üëx)

lemma Moebius_equivalent: (((Icc (0: ‚Ñù) 1): Type) √ó (Ico (0: ‚Ñù) 1))  ‚âÖ Moebius :=
{ to_fun := 
  begin
    rintros ‚ü®‚ü®u, hu‚ü©, ‚ü®v, hv‚ü©‚ü©,
    sorry,
  end,
  inv_fun := 
  begin
    rintros ‚ü®‚ü®x, y,z‚ü©, hxyz‚ü©,
    sorry,
  end,
  left_inv := sorry,
  right_inv := sorry,
  continuous_to_fun := sorry,
  continuous_inv_fun := sorry }
-/


end Moebius
