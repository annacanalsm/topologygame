import topologia
import .separacio

open topological_space
open set

variables (X : Type) [topological_space X]

/-- A topological space is (quasi)compact if every open covering admits a finite subcovering -/
def is_compact :=
  ‚àÄ ùí∞ : set (set X), (‚àÄ U ‚àà ùí∞, is_open U) ‚Üí 
  (‚ãÉ‚ÇÄ ùí∞ = univ) ‚Üí (‚àÉ ‚Ñ± ‚äÜ ùí∞, finite ‚Ñ± ‚àß ‚ãÉ‚ÇÄ‚Ñ± = univ)

def is_compact_subset {X : Type} [topological_space X] (S : set X):=
  ‚àÄ ùí∞ : set (set X), (‚àÄ U ‚àà ùí∞, is_open U) ‚Üí
  (S ‚äÜ ‚ãÉ‚ÇÄ ùí∞) ‚Üí (‚àÉ ‚Ñ± ‚äÜ ùí∞, finite ‚Ñ± ‚àß S ‚äÜ ‚ãÉ‚ÇÄ‚Ñ± )

lemma is_compact_set' {A : set X} {I : Type*} (h : is_compact_subset A) (U : I ‚Üí set X)
(hU : ‚àÄ i, is_open (U i)) (hcov : A ‚äÜ ‚ãÉ‚ÇÄ (U '' univ)):
  ‚àÉ (F : set I), F.finite ‚àß (A ‚äÜ ‚ãÉ‚ÇÄ (U '' F)) :=
begin
  unfold is_compact_subset at h,
  set ùí∞ := U '' univ with ùí∞def,
  have exists_preimage : ‚àÄ Ui ‚àà ùí∞, ‚àÉ i : I, (U i) = Ui, by finish,
  let map_inverse : ùí∞ ‚Üí I := Œª Ui, classical.some (exists_preimage Ui.1 Ui.2),
  have map_inverse_spec : ‚àÄ Ui, U (map_inverse Ui) = Ui :=
    Œª Ui, classical.some_spec (exists_preimage Ui.1 Ui.2),
  have hU' : ‚àÄ Ui ‚àà ùí∞, is_open Ui,
  {
    intros Ui hUi,
    obtain ‚ü®i, hi‚ü© := exists_preimage Ui hUi,
    rw ‚Üêhi,
    tauto,
  },
  obtain ‚ü®FF, ‚ü®hFF1, ‚ü®hFF2,hFF3‚ü©‚ü©‚ü© := h ùí∞ hU' hcov,
  clear h,
  set F := map_inverse '' (coe ‚Åª¬π' FF) with Fdef,
  use F,
  have Ffin : F.finite,
  {
    rw Fdef,
    refine finite.image map_inverse _,
    refine finite.preimage _ hFF2,
    intros x hx y hy,
    exact subtype.eq,
  },
  have hcov'' : U '' F = FF,
  {
    rw Fdef,
    ext V,
    split,
    {
      intro hV,
      simp at hV,
      obtain ‚ü®i, ‚ü®‚ü®Ui,‚ü®hUiF, ‚ü®‚ü®j, haj‚ü©, hh'‚ü©‚ü©‚ü©,h‚ü©‚ü© := hV,
      subst h,
      suffices : U i = Ui, by simpa [this] using hUiF,
      apply (congr_arg U (eq.symm hh')).trans,
      apply map_inverse_spec,
    },
    {
      intro hV,
      simp only [mem_image, set_coe.exists, mem_univ, mem_preimage, subtype.coe_mk],
      have VinU : V ‚àà ùí∞ := hFF1 hV,
      set i := map_inverse ‚ü®V, VinU‚ü©,
      use i, use V,
      { exact ‚ü®VinU, ‚ü®hV, rfl‚ü©‚ü© },
      { exact_mod_cast map_inverse_spec ‚ü®V, VinU‚ü© }
    }
  },
  simp [hcov''],
  tauto,
end


lemma compact_space_iff_univ_compact :  is_compact X ‚Üî is_compact_subset (univ :set X) :=
begin
  split; intros h I hI hIX,
  { obtain ‚ü®F, hF, hh‚ü© := h I hI (univ_subset_iff.mp hIX),
    exact ‚ü®F, hF, hh.1, hh.2.symm.subset‚ü©},
  { obtain ‚ü®F, hF, hh‚ü© := h I hI (eq.symm hIX).subset,
    exact ‚ü®F, hF, hh.1, univ_subset_iff.mp hh.2‚ü©},
end

lemma finite_set_is_compact (h : fintype X) : is_compact X :=
begin
  intros I hI huniv,
  exact ‚ü®I, rfl.subset, finite.of_fintype I, huniv‚ü©,
end

lemma union_of_compacts_is_compact {A B : set X} (hA : is_compact_subset A) (hB : is_compact_subset B) : is_compact_subset (A ‚à™ B) :=
begin
  intros I hI huI,
  have hinclAB := union_subset_iff.1 huI,
  obtain ‚ü®FA, hFA, hhFA‚ü© := hA I hI hinclAB.1,
  obtain ‚ü®FB, hFB, hhFB‚ü© := hB I hI hinclAB.2,
  have hunion : A ‚à™ B ‚äÜ ‚ãÉ‚ÇÄ(FA ‚à™ FB),
  { rw  (sUnion_union FA FB),
    exact union_subset_union hhFA.right hhFB.right},
  exact ‚ü®FA ‚à™ FB, union_subset hFA hFB, hhFA.left.union hhFB.left, hunion‚ü©,
end

lemma empty_is_compact : is_compact_subset (‚àÖ : set X) :=
begin
  intros I hI hhI,
  use ‚àÖ,
  exact ‚ü® empty_subset I, finite_empty, by tauto‚ü©,
end

lemma finite_union_of_compacts_is_compact {I : set(set X)} (h : ‚àÄ s ‚àà I, is_compact_subset s) (hI : finite I) : is_compact_subset (‚ãÉ‚ÇÄI):=
begin
  revert h,
  apply finite.induction_on hI,
  { intros I,
    rw sUnion_empty,
    apply empty_is_compact},
  { intros V T hVT hT hUT hs,
    have t : (‚ãÉ‚ÇÄinsert V T) = ‚ãÉ‚ÇÄ T ‚à™ V, by finish,
    have hsT: (‚àÄ (s : set X), s ‚àà T ‚Üí is_compact_subset s),
    { intros s hhs,
      exact hs s (mem_insert_of_mem V hhs)},
    rw t,
    exact union_of_compacts_is_compact X (hUT hsT) (hs V (mem_insert V T))},
end

lemma singleton_is_compact (x : X) : is_compact_subset ({x} : set X) :=
begin
  intros I hI hIincl,
  cases (bex_def.mp (hIincl  rfl)) with U hU,
  have hsingUI : {x} ‚äÜ ‚ãÉ‚ÇÄ{U},
  { rw (sUnion_singleton U),
    exact singleton_subset_iff.mpr hU.right},
  exact ‚ü®{U}, singleton_subset_iff.mpr hU.1, finite_singleton U, hsingUI‚ü©,  
end

lemma finite_subset_is_compact (A : set X): finite A ‚Üí is_compact_subset A :=
begin
  intro h,
  apply finite.induction_on h,
  apply empty_is_compact,
  intros a s has hsfin hscpt,
  apply union_of_compacts_is_compact,
  apply singleton_is_compact,
  assumption,
end

lemma closed_subset_of_compact_is_compact {A B : set X} (hA : is_closed A) (hB : is_compact_subset B) (hAB : A ‚äÜ B) : 
  is_compact_subset A :=
begin
  intros I hI hIA,
  have hF : ‚àÄ (U : set X), U ‚àà I ‚à™ {A·∂ú} ‚Üí is_open U,
  { intros U hU,
    cases ((mem_union U I {A·∂ú}).mp hU) with h,
      {exact hI U h},
      {rwa (mem_singleton_iff.mp h)}},
  have hUnionB : B ‚äÜ ‚ãÉ‚ÇÄ(I ‚à™ {A·∂ú}),
  { rw [sUnion_union I {A·∂ú}, A·∂ú.sUnion_singleton, (union_diff_cancel hAB).symm],
    exact union_subset_union hIA (inter_subset_right B A·∂ú)},
  obtain ‚ü®F, hFA, hh‚ü©  := hB (I ‚à™ {A·∂ú}) hF hUnionB,
  have hFI : F \ {A·∂ú} ‚äÜ I,
  { intros x hx,
    cases ((mem_union x I {A·∂ú}).mp (hFA ((diff_subset F {A·∂ú})  hx))) with h,
      {exact h},
      {exfalso,
       exact (not_mem_of_mem_diff hx) h}},
  have hsubsetU : A ‚äÜ ‚ãÉ‚ÇÄ(F \ {A·∂ú}),
  { intros x hx,
    rcases (mem_sUnion.1 ((subset.trans hAB hh.right) hx)) with ‚ü®V, ‚ü®hV1, hV2‚ü©‚ü©,
    exact (@mem_sUnion X x (F \ {A·∂ú})).2 ‚ü®V, ‚ü®hV1, by finish‚ü©, hV2‚ü©},
  exact ‚ü®F\{A·∂ú}, hFI, hh.left.subset (diff_subset F {A·∂ú}), hsubsetU‚ü©,
end

/-
lemma finite_subset_is_compact_using_choice (A : set X) (h : finite A) : is_compact_subset A :=
begin
  intros I hI huniv,
  have H : ‚àÄ a ‚àà A, ‚àÉ ia ‚àà I, a ‚àà ia, by assumption,
  let f : A ‚Üí set X := Œª ‚ü®x, hxA‚ü©, classical.some (H x hxA),
  have hf1 : ‚àÄ (x : X) (hx : x ‚àà A), x ‚àà (f ‚ü®x, hx‚ü©),
  {
    intros x hx,
    have hh := classical.some_spec (H x hx),
    tauto,
  },
  have hf2 : ‚àÄ (x : X) (hx : x ‚àà A), (f ‚ü®x, hx‚ü©) ‚àà I,
  {
    intros x hx,
    have hh := classical.some_spec (H x hx),
    tauto,
  },
  use f '' univ,
  simp,
  split,
  {
    intros i hi,
    simp at hi,
    obtain ‚ü®x, ‚ü®hx,h'‚ü©‚ü© := hi,
    subst h',
    tauto,
  },
  split,
  {
    haveI : fintype {x : X // x ‚àà A} := finite.fintype h,
    apply finite_range f,
  },
  {
    unfold Union,
    intros x hx,
    unfold supr,
    rw Sup_eq_supr,
    simp,
    use f ‚ü®x,hx‚ü©,
    use x,
    use hx,
    tauto,
  }
end
 -/
open hausdorff_space


-- X : Type, i A : set X
-- per cada a ‚àà A, triem Ua, Va oberts amb a ‚àà Ua, y ‚àà Va, Ua ‚à© Va = ‚àÖ.
-- A ‚äÜ ‚ãÉ Ua. A compacte -> subrecobriment finit Ua1,..., Uan.
-- V = ‚ãÇ Vai. obert perqu√® intersecci√≥ finita. Aquest V funciona.
-- U : {a : X // a ‚àà A} ‚Üí set X, a ‚Ü¶ Ua
lemma for_compact_exist_open_disjont {A : set X} [hausdorff_space X] (h : is_compact_subset A)
  (y : X) (hyA : ¬¨ y ‚àà A) :  ‚àÉ (V : set X), is_open V ‚àß V ‚à© A = ‚àÖ ‚àß y ‚àà V :=
begin
  have UV : ‚àÄ a ‚àà A, ‚àÉ UVa : set X √ó set X,
    is_open UVa.fst ‚àß is_open UVa.snd ‚àß UVa.fst ‚à© UVa.snd = ‚àÖ ‚àß a ‚àà UVa.fst ‚àß y ‚àà UVa.snd,
  {
    intros a ha,
    have hya : y ‚â† a,
    { intro h, subst h, contradiction },
    obtain ‚ü®U, V, _‚ü© := t2 a y hya,
    exact ‚ü®‚ü®U, V‚ü©, by tauto‚ü©,
  },
  let U : A ‚Üí set X := Œª a, (classical.some (UV a.1 a.2)).fst,
  have hU : ‚àÄ (a : A), is_open (U ‚ü®a.1, a.2‚ü©)
   := Œª a, (classical.some_spec (UV a.1 a.2)).1,
  let V : A ‚Üí set X := Œª a, (classical.some (UV a.1 a.2)).snd,
  have hV : ‚àÄ (a : A), is_open (V ‚ü®a.1, a.2‚ü©)
   := Œª a, (classical.some_spec (UV a.1 a.2)).2.1,
  have hUV : ‚àÄ (a : A), (U ‚ü®a.1, a.2‚ü© ‚à© V ‚ü®a.1, a.2‚ü© = ‚àÖ)
   := Œª a, (classical.some_spec (UV a.1 a.2)).2.2.1,
  have hUVa : ‚àÄ (a : A), (a.1 ‚àà U ‚ü®a.1, a.2‚ü©)
   := Œª a, (classical.some_spec (UV a.1 a.2)).2.2.2.1,
  have hUVy : ‚àÄ (a : A), (y ‚àà V ‚ü®a.1, a.2‚ü©)
   := Œª a, (classical.some_spec (UV a.1 a.2)).2.2.2.2,
  have hAcov : A ‚äÜ ‚ãÉ‚ÇÄ (U '' univ),
  {
    intros a ha,
    specialize hUVa ‚ü®a, ha‚ü©,
    simp only [mem_Union, sUnion_range, image_univ, set_coe.exists],
    exact ‚ü®a, ha, by simp [hUVa]‚ü©,
  },
  have hfin : ‚àÉ (F : set X), F.finite ‚àß (A ‚äÜ ‚ãÉ‚ÇÄ (U '' {x : A | x.1 ‚àà F})),
  {
    obtain ‚ü®F, ‚ü®hF1,hF2‚ü©‚ü© := is_compact_set' _ h U hU hAcov,
    use coe '' F,
    simpa [finite.image coe hF1] using hF2,
  },
  obtain ‚ü®F, ‚ü®hf, h'‚ü©‚ü© := hfin,
  have : fintype {a // a ‚àà F},
  {
    apply fintype.of_finset (finite.to_finset hf),
    finish,
  },
  haveI: fintype {a // a ‚àà F} := this,
  use ‚ãÇ‚ÇÄ (V '' {x : A | x.1 ‚àà F}),
  repeat {split},
  {
    apply is_open_sInter,--open_of_finite_set_opens,
    {
      apply finite.image,
      refine finite.preimage _ hf,
      dsimp,
      intros x2 hx2 aa haa htmp,
      exact subtype.eq htmp,
    },
    intros s hs,
    simp at hs,
    obtain ‚ü®x, ‚ü®hx1, ‚ü®hxA, rfl‚ü©‚ü©‚ü© := hs,
    finish,
  },
  {
    ext,
    simp,
    intros hx hxA,
    specialize h' hxA,
    simp only [exists_prop, mem_Union, sUnion_image, set_coe.exists] at h',
    obtain ‚ü®z, ‚ü®hz1, ‚ü®hz2, hz3‚ü©‚ü©‚ü© := h',
    specialize hUV ‚ü®z, hz1‚ü©,
    suffices : (U ‚ü®z, hz1‚ü© ‚à© V ‚ü®z, hz1‚ü©) ‚â† ‚àÖ, by contradiction,
    apply nonempty.ne_empty,
    exact ‚ü®x, ‚ü®hz3, hx z hz1 hz2‚ü©‚ü©,
  },
  { simpa using Œª x hx1 hx2, hUVy ‚ü®x, hx1‚ü© }
end

lemma compact_in_T2_is_closed {A : set X} [hausdorff_space X] (h : is_compact_subset A) : is_closed A :=
begin
  have hAc : interior A·∂ú = A·∂ú,
  { apply subset.antisymm,
      {exact interior_subset_self A·∂ú},
    { intros x hxA,
      cases (for_compact_exist_open_disjont X h) x hxA with V hV,
      have hVAc : V ‚äÜ A·∂ú,
      { intros y hy,
        have hynA : y ‚àâ A,
        { intro hyA,
          have hyVA : y ‚àà V ‚à© A, by exact ‚ü®hy, hyA‚ü©,
          have hIe : V ‚à© A ‚â† ‚àÖ, by finish,
          exact hIe hV.2.1},
        exact mem_compl hynA},
      exact ‚ü®V, hV.1, hV.2.2, hVAc‚ü©}},
  rw [is_closed, ‚Üê hAc],
  exact (interior_is_open A·∂ú),
end
